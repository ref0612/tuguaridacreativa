import { User } from '../../users/entities/user.entity';
import { Category } from './category.entity';
import { ProductImage } from './product-image.entity';
import { ProductVariant, VariantType } from './product-variant.entity';
import { Review } from './review.entity';
export declare class Product {
    id: string;
    userId: string;
    name: string;
    slug: string;
    shortDescription: string;
    description: string;
    price: number;
    salePrice: number | null;
    sku: string;
    stock: number;
    weight: number | null;
    width: number | null;
    height: number | null;
    depth: number | null;
    isPublished: boolean;
    isFeatured: boolean;
    isOnSale: boolean;
    averageRating: number;
    reviewCount: number;
    totalSales: number;
    viewCount: number;
    deletedAt: Date | null;
    user: User;
    categories: Category[];
    images: ProductImage[];
    variants: ProductVariant[];
    reviews: Review[];
    get isAvailable(): boolean;
    get onSale(): boolean;
    get discountPercentage(): number | null;
    get mainImage(): string | null;
    get minPrice(): number;
    get maxPrice(): number;
    get variantTypes(): string[];
    generateSlug(): void;
    setDefaultValues(): void;
    updateComputedFields(): void;
    updateStock(quantity: number): boolean;
    incrementViewCount(): void;
    recordSale(quantity?: number): void;
    getVariantOptions(type: VariantType): Array<{
        value: string;
        label?: string;
        colorCode?: string;
    }>;
    findVariant(attributes: Record<string, string>): ProductVariant | null;
    createdAt: Date;
    updatedAt: Date;
    static createDefault(partial?: Partial<Product>): Product;
}
