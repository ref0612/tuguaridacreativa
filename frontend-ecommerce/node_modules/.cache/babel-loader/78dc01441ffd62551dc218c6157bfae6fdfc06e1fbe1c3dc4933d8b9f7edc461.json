{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n// Cargar el carrito desde localStorage si existe\nconst loadCartFromStorage = () => {\n  if (typeof window !== 'undefined') {\n    const savedCart = localStorage.getItem('cart');\n    return savedCart ? JSON.parse(savedCart) : [];\n  }\n  return [];\n};\nconst calculateTotal = items => {\n  return items.reduce((total, item) => total + item.price * item.quantity, 0);\n};\nconst initialState = {\n  items: loadCartFromStorage(),\n  total: 0,\n  loading: false,\n  error: null\n};\n\n// Calcular el total inicial\ninitialState.total = calculateTotal(initialState.items);\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      const existingItem = state.items.find(item => item.productId === action.payload.productId);\n      if (existingItem) {\n        existingItem.quantity += action.payload.quantity;\n      } else {\n        state.items.push({\n          ...action.payload,\n          id: Math.random().toString(36).substr(2, 9)\n        });\n      }\n      state.total = calculateTotal(state.items);\n      localStorage.setItem('cart', JSON.stringify(state.items));\n    },\n    removeFromCart: (state, action) => {\n      state.items = state.items.filter(item => item.id !== action.payload);\n      state.total = calculateTotal(state.items);\n      localStorage.setItem('cart', JSON.stringify(state.items));\n    },\n    updateQuantity: (state, action) => {\n      const item = state.items.find(item => item.id === action.payload.id);\n      if (item) {\n        item.quantity = action.payload.quantity;\n        state.total = calculateTotal(state.items);\n        localStorage.setItem('cart', JSON.stringify(state.items));\n      }\n    },\n    clearCart: state => {\n      state.items = [];\n      state.total = 0;\n      localStorage.removeItem('cart');\n    },\n    loadCart: state => {\n      const savedCart = loadCartFromStorage();\n      state.items = savedCart;\n      state.total = calculateTotal(savedCart);\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  clearCart,\n  loadCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","loadCartFromStorage","window","savedCart","localStorage","getItem","JSON","parse","calculateTotal","items","reduce","total","item","price","quantity","initialState","loading","error","cartSlice","name","reducers","addToCart","state","action","existingItem","find","productId","payload","push","id","Math","random","toString","substr","setItem","stringify","removeFromCart","filter","updateQuantity","clearCart","removeItem","loadCart","actions","reducer"],"sources":["C:/Users/ferna/Desktop/ecommerce/frontend-ecommerce/src/store/slices/cartSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface CartItem {\n  id: string;\n  productId: string;\n  name: string;\n  price: number;\n  quantity: number;\n  image: string;\n}\n\ninterface CartState {\n  items: CartItem[];\n  total: number;\n  loading: boolean;\n  error: string | null;\n}\n\n// Cargar el carrito desde localStorage si existe\nconst loadCartFromStorage = (): CartItem[] => {\n  if (typeof window !== 'undefined') {\n    const savedCart = localStorage.getItem('cart');\n    return savedCart ? JSON.parse(savedCart) : [];\n  }\n  return [];\n};\n\nconst calculateTotal = (items: CartItem[]): number => {\n  return items.reduce((total, item) => total + item.price * item.quantity, 0);\n};\n\nconst initialState: CartState = {\n  items: loadCartFromStorage(),\n  total: 0,\n  loading: false,\n  error: null,\n};\n\n// Calcular el total inicial\ninitialState.total = calculateTotal(initialState.items);\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart: (state, action: PayloadAction<Omit<CartItem, 'id'>>) => {\n      const existingItem = state.items.find(\n        (item) => item.productId === action.payload.productId\n      );\n\n      if (existingItem) {\n        existingItem.quantity += action.payload.quantity;\n      } else {\n        state.items.push({\n          ...action.payload,\n          id: Math.random().toString(36).substr(2, 9),\n        });\n      }\n\n      state.total = calculateTotal(state.items);\n      localStorage.setItem('cart', JSON.stringify(state.items));\n    },\n    removeFromCart: (state, action: PayloadAction<string>) => {\n      state.items = state.items.filter((item) => item.id !== action.payload);\n      state.total = calculateTotal(state.items);\n      localStorage.setItem('cart', JSON.stringify(state.items));\n    },\n    updateQuantity: (\n      state,\n      action: PayloadAction<{ id: string; quantity: number }>\n    ) => {\n      const item = state.items.find((item) => item.id === action.payload.id);\n      if (item) {\n        item.quantity = action.payload.quantity;\n        state.total = calculateTotal(state.items);\n        localStorage.setItem('cart', JSON.stringify(state.items));\n      }\n    },\n    clearCart: (state) => {\n      state.items = [];\n      state.total = 0;\n      localStorage.removeItem('cart');\n    },\n    loadCart: (state) => {\n      const savedCart = loadCartFromStorage();\n      state.items = savedCart;\n      state.total = calculateTotal(savedCart);\n    },\n  },\n});\n\nexport const {\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  clearCart,\n  loadCart,\n} = cartSlice.actions;\n\nexport default cartSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}